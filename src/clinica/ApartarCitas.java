/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinica;

import datos.Paciente;
import datos.Medico;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author keiinerp
 */
public class ApartarCitas extends javax.swing.JDialog {

    /**
     * Creates new form ApartarCitas
     */
    ArrayList<Medico> listaMedicos;

    public ApartarCitas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        listaMedicos = Archivo.leerMedicoBinario();
        listaMedicos.removeAll(listaMedicos);
        Archivo.escribirListaMedicos(listaMedicos);
        doctorCombo.removeAllItems();
        doctorCombo.addItem("SELECCIONE");
        listaPacientes = Archivo.leerPacientesBinario();
        for (int i = 0; i < listaMedicos.size(); i++) {
            Medico get = listaMedicos.get(i);
            doctorCombo.addItem(get.getNombre());
        }               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pacienteExplicacionText = new javax.swing.JTextField();
        horaCombo = new javax.swing.JComboBox<>();
        edadTexto = new javax.swing.JTextField();
        nombreTexto = new javax.swing.JTextField();
        identificacionTexto = new javax.swing.JTextField();
        doctorTitulo = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        apartarCitaBoton = new javax.swing.JButton();
        cerrarBoton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pacientesTabla = new javax.swing.JTable();
        cancelarCitaBoton = new javax.swing.JButton();
        doctorCombo = new javax.swing.JComboBox<>();

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("*");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Apartar citas");

        jLabel1.setText("Apartar Cita");

        jLabel2.setText("Identificacion:");

        jLabel3.setText("Nombre Completo:");

        jLabel4.setText("Edad:");

        jLabel5.setText("Hora de la Cita:");

        jLabel6.setText("¿Quiere darnos una breve explicación de su situación?");

        pacienteExplicacionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacienteExplicacionTextActionPerformed(evt);
            }
        });

        horaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaComboActionPerformed(evt);
            }
        });

        identificacionTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identificacionTextoActionPerformed(evt);
            }
        });
        identificacionTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                identificacionTextoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                identificacionTextoKeyTyped(evt);
            }
        });

        doctorTitulo.setText("Doctor:");

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("*");

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("*");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("*");

        apartarCitaBoton.setText("Apartar Cita");
        apartarCitaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartarCitaBotonActionPerformed(evt);
            }
        });

        cerrarBoton.setText("Cerrar");
        cerrarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarBotonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(pacientesTabla);

        cancelarCitaBoton.setText("Cancelar Cita");
        cancelarCitaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCitaBotonActionPerformed(evt);
            }
        });

        doctorCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE" }));
        doctorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cerrarBoton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelarCitaBoton)
                                .addGap(18, 18, 18)
                                .addComponent(apartarCitaBoton))
                            .addComponent(pacienteExplicacionText, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(horaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(edadTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(doctorTitulo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(doctorCombo, 0, 167, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel1)
                                                .addComponent(identificacionTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(nombreTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(identificacionTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nombreTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(edadTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(horaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(doctorTitulo)
                    .addComponent(jLabel13)
                    .addComponent(doctorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pacienteExplicacionText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apartarCitaBoton)
                    .addComponent(cerrarBoton)
                    .addComponent(cancelarCitaBoton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pacienteExplicacionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pacienteExplicacionTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pacienteExplicacionTextActionPerformed

    private void apartarCitaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartarCitaBotonActionPerformed
        guardar();
    }//GEN-LAST:event_apartarCitaBotonActionPerformed
    public void guardar() {
        String medico, nombre, identificacion, horaCita, problema;
        int edad;
        horaCita = (String) horaCombo.getSelectedItem();
        medico = (String) doctorCombo.getSelectedItem();
        nombre = nombreTexto.getText();
        problema = pacienteExplicacionText.getText();
        try {
            edad = Integer.valueOf(edadTexto.getText());
            identificacion = (identificacionTexto.getText());
            condicion2 = 1;
            validacionesVacio();
            repetido();
            if (condicion1 == 1 && condicionRepetido == 0) {
                eliminarHora(horaCita, medico);
                llenarTabla();
                pacientesTabla.setVisible(true);
                listaPacientes.add(new Paciente(horaCita, medico, edad, nombre, identificacion, problema)); 
                Archivo.escribirListaPacientes(listaPacientes);
                llenarTabla();
                limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo apartar cita");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Numeros en campos de letra");
        }
    }

    public void llenarTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        String[] columnas = {"Identificacion", "Nombre", "Hora de la cita", "Medico"};
        modelo.setColumnIdentifiers(columnas);
        for (Paciente p : listaPacientes) {
            String[] fila = {p.getIdentificacion(), p.getNombre(), p.getHoraCita(), p.getMedico()};
            modelo.addRow(fila);
        }
        pacientesTabla.setModel(modelo);
    }

    public void repetido() {
        for (Medico p : listaMedicos) {
            if (p.getIdentificacion().equals(identificacionTexto.getText())
                    || p.getNombre().toUpperCase().equals(nombreTexto.getText().toUpperCase())) {
                condicionRepetido = 1;
            } else {
                condicionRepetido = 0;
            }
        }
    }

    public void validacionesVacio() {
        if (nombreTexto.equals("") || edadTexto.equals("") || identificacionTexto.equals("") || doctorCombo.getSelectedItem().equals("SELECCIONE") || horaCombo.getSelectedItem().equals("SELECCIONE")) {
            JOptionPane.showMessageDialog(null, "Rellene todos los campos marcados con *");
            condicion1 = 0;
        } else {
            condicion1 = 1;
        }
    }

    public ArrayList<Medico> getListaMedicos() {
        return listaMedicos;
    }

    private void horaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaComboActionPerformed

    }//GEN-LAST:event_horaComboActionPerformed

    private void cancelarCitaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCitaBotonActionPerformed

    }//GEN-LAST:event_cancelarCitaBotonActionPerformed

    private void doctorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorComboActionPerformed
        String medicoNombre = (String) doctorCombo.getSelectedItem();
        colocarHora(medicoNombre);
    }//GEN-LAST:event_doctorComboActionPerformed

    private void cerrarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarBotonActionPerformed
        getListaMedicos();
        dispose();
    }//GEN-LAST:event_cerrarBotonActionPerformed

    private void identificacionTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identificacionTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_identificacionTextoActionPerformed

    private void identificacionTextoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_identificacionTextoKeyPressed

    }//GEN-LAST:event_identificacionTextoKeyPressed

    private void identificacionTextoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_identificacionTextoKeyTyped
 if ((evt.getKeyChar() < '0' || evt.getKeyChar() > '9') && (evt.getKeyChar() != 8) || (identificacionTexto.getText().length() == 16)) {
            evt.consume();
        }
    }//GEN-LAST:event_identificacionTextoKeyTyped

    public void colocarHora(String medico) {
        int i = 0;
        try {
            for (int j = 0; j < listaMedicos.size(); j++) {
                String get = listaMedicos.get(j).getNombre();
                if (medico.equals(get)) {
                    horaCombo.removeAllItems();
                    horaCombo.addItem("SELECCIONE");
                    for (int k = 0; k < listaMedicos.get(j).getHorasTrabajo().size(); k++) {
                        horaCombo.addItem(listaMedicos.get(j).getHorasTrabajo().get(k));
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    public void eliminarHora(String hora, String medico) {
        if (horaCombo.getSelectedItem() == hora) {
            if (doctorCombo.getSelectedItem().equals(medico)) {
                horas.remove(hora);
                horaCombo.removeItem(hora);
                horaCombo.setSelectedItem("SELECCIONE");
            }
        }
    }

    public void limpiar() {
        horaCombo.setSelectedItem("SELECCIONE");
        doctorCombo.setSelectedItem("SELECCIONE");
        nombreTexto.setText("");
        edadTexto.setText("");
        pacienteExplicacionText.setText("");
        identificacionTexto.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apartarCitaBoton;
    private javax.swing.JButton cancelarCitaBoton;
    private javax.swing.JButton cerrarBoton;
    private javax.swing.JComboBox<String> doctorCombo;
    private javax.swing.JLabel doctorTitulo;
    private javax.swing.JTextField edadTexto;
    private javax.swing.JComboBox<String> horaCombo;
    private javax.swing.JTextField identificacionTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreTexto;
    private javax.swing.JTextField pacienteExplicacionText;
    private javax.swing.JTable pacientesTabla;
    // End of variables declaration//GEN-END:variables
ArrayList<String> horas = new ArrayList<>();
    ArrayList<Paciente> listaPacientes = new ArrayList<>();
    public int condicion1;
    public int condicion2;
    public int condicionRepetido;
}
/*public void horas(){
            horas.add("8:00");
            horas.add("8:20");
            horas.add("8:40");
            horas.add("9:00");
            horas.add("9:20");
            horas.add("9:40");
            horas.add("10:00");
            horas.add("10:20");
            horas.add("10:40");
            horas.add("11:00");
            horas.add("11:20");
            horas.add("11:40");
            horas.add("12:00");
            horas.add("1:00");
            horas.add("1:20");
            horas.add("1:40");
            horas.add("2:00");
            horas.add("2:20");
            horas.add("2:40");
            horas.add("3:00");
            horas.add("3:20");
            horas.add("3:40");
            horas.add("4:00");
            horas.add("4:20");
            horas.add("4:40");
            horas.add("5:00");
            horas.add("5:20");
            horas.add("5:40");
            horas.add("6:00");
            horas.add("6:20");
            horas.add("6:40");
            horas.add("7:00");
            horas.add("7:20");
}*/

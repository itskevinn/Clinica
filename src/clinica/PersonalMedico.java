/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinica;

import datos.Medico;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author keiinerp
 */
public class PersonalMedico extends javax.swing.JDialog {

    /**
     * Creates new form PersonalMedico
     *
     * @param parent
     * @param modal
     */
    ArrayList<Medico> listaMedicos;
    ArrayList<String> horasDisponibles;

    public PersonalMedico(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        listaMedicos = Archivo.leerMedicoBinario();
        horasDisponibles = Archivo.leerHorariosDisponibles();
        if (horasDisponibles.isEmpty()) {
            colocarHorasDisponibles();
        } else {
            horasDisponibles = Archivo.leerHorariosDisponibles();
        }
        pintarTabla();
        horaCombo.removeAllItems();
        horaCombo.addItem("SELECCIONE");        
        colocarHoras();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        añadirDoctorBoton = new javax.swing.JButton();
        edadTexto = new javax.swing.JTextField();
        nombreTexto = new javax.swing.JTextField();
        identificacionTexto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        horaCombo = new javax.swing.JComboBox<>();
        encontrarMedicoBoton = new javax.swing.JButton();
        eliminarBoton = new javax.swing.JButton();
        editarBoton = new javax.swing.JButton();
        identificacionTexto1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        medicoEncontrado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicosTabla = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manejo de datos del personal medico");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Clínica Valledupar");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("Personal médico");

        añadirDoctorBoton.setText("Añadir Médico");
        añadirDoctorBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirDoctorBotonActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("*");

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("*");

        jLabel3.setText("Identificacion:");

        jLabel4.setText("Nombre Completo:");

        jLabel5.setText("Edad:");

        jLabel6.setText("Horas de trabajo");

        horaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE" }));
        horaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaComboActionPerformed(evt);
            }
        });

        encontrarMedicoBoton.setText("Encontrar Medico");
        encontrarMedicoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encontrarMedicoBotonActionPerformed(evt);
            }
        });

        eliminarBoton.setText("Eliminar Medico");
        eliminarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBotonActionPerformed(evt);
            }
        });

        editarBoton.setText("Editar");

        medicoEncontrado.setColumns(20);
        medicoEncontrado.setRows(5);
        jScrollPane3.setViewportView(medicoEncontrado);

        medicosTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificacion", "Nombre", "Horario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        medicosTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicosTablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(medicosTabla);

        jMenu1.setText("Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Guardar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Salir");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(identificacionTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(nombreTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel5))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(edadTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(horaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addComponent(añadirDoctorBoton)
                                    .addComponent(jScrollPane3))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(identificacionTexto1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(encontrarMedicoBoton)
                                        .addGap(18, 18, 18)
                                        .addComponent(eliminarBoton)
                                        .addGap(18, 18, 18)
                                        .addComponent(editarBoton))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(identificacionTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nombreTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(encontrarMedicoBoton)
                    .addComponent(identificacionTexto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarBoton)
                    .addComponent(editarBoton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(edadTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(horaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(añadirDoctorBoton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void horaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaComboActionPerformed

    }//GEN-LAST:event_horaComboActionPerformed

    private void añadirDoctorBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirDoctorBotonActionPerformed
        añadir();
    }//GEN-LAST:event_añadirDoctorBotonActionPerformed
    public void añadir() {
        String hora, nombre, identificacion;
        int edad = 0;
        hora = (String) horaCombo.getSelectedItem();
        nombre = nombreTexto.getText();
        identificacion = identificacionTexto.getText();
        try {
            edad = Integer.valueOf(edadTexto.getText());
            validacionesVacio();
            condicionRepetido = repetido();
            if (condicion1 == 1 && condicionRepetido == 0) {
                horasTrabajo = colocarHoras(hora);
                Medico medico = new Medico();
                medico.setEdad(edad);
                medico.setNombre(nombre);
                medico.setHorario(hora);
                medico.setHorasTrabajo(horasTrabajo);
                medico.setIdentificacion(identificacion);
                eliminarHora(hora);
                medicosTabla.setVisible(true);
                listaMedicos.add(medico);
                Archivo.escribirListaMedicos(listaMedicos);
                pintarTabla();
                limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo guardar medico");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ingrese sólo números en la edad");
        }

    }

    private void colocarHoras() {
        horaCombo.removeAllItems();
        horasDisponibles = Archivo.leerHorariosDisponibles();
        for (int i = 0; i < horasDisponibles.size(); i++) {
            horaCombo.addItem(horasDisponibles.get(i));            
        }        
    }
    private void eliminarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBotonActionPerformed
        String id = identificacionTexto1.getText();
        horasDisponibles.add(eliminarMedico(id));
        limpiar();
        try {
            Collections.sort(horasDisponibles);
            Archivo.escribirHorariosDisponibles(horasDisponibles);
            colocarHoras();
            pintarTabla();
            Collections.sort(horasDisponibles);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_eliminarBotonActionPerformed
    private void limpiar() {
        nombreTexto.setText("");
        identificacionTexto.setText("");
        identificacionTexto1.setText("");
        horaCombo.setSelectedItem("SELECCIONE");
        edadTexto.setText("");
        medicoEncontrado.setText("");
    }

    private void colocarHorasDisponibles() {
        horasDisponibles.add("8:00 - 10:00");
        horasDisponibles.add("10:20 - 12:20");
        horasDisponibles.add("12:40 - 2:40");
        horasDisponibles.add("3:00 - 5:00");
        horasDisponibles.add("5:20 - 7:00");
        Archivo.escribirHorariosDisponibles(horasDisponibles);
    }
    private void encontrarMedicoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encontrarMedicoBotonActionPerformed
        String id = identificacionTexto1.getText();
        if (identificacionTexto1.getText() == null) {
            JOptionPane.showMessageDialog(this, "Ingrese una identificacion a buscar en el cuadro de texto señalado");
            identificacionTexto1.requestFocus();
        } else {
            for (Medico medico : listaMedicos) {
                if (id.equals(medico.getIdentificacion())) {
                    medicoEncontrado.setText(medico.getIdentificacion() + "   " + medico.getNombre() + "   " + medico.getHorario());
                }
            }
        }
    }//GEN-LAST:event_encontrarMedicoBotonActionPerformed

    private void medicosTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicosTablaMouseClicked
        int numeroFila;
        Medico medico;
        if (evt.getClickCount() == 1) {
            numeroFila = medicosTabla.getSelectedRow();
            medico = listaMedicos.get(numeroFila);
            nombreTexto.setText(medico.getNombre());
            identificacionTexto.setText(medico.getIdentificacion());
            identificacionTexto1.setText(medico.getIdentificacion());
            horaCombo.setSelectedItem(medico.getHorario());
            edadTexto.setText(String.valueOf(medico.getEdad()));
            medicoEncontrado.setText(medico.getIdentificacion() + "   " + medico.getNombre() + "   " + medico.getHorario());
        }
    }//GEN-LAST:event_medicosTablaMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        añadir();
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    public String eliminarMedico(String identificacion) {
        String horario = null;
        int encontrado = 0;
        for (Medico medico : listaMedicos) {
            if (identificacion.equals(medico.getIdentificacion())) {
                horario = medico.getHorario();
                listaMedicos.remove(medico);
                Archivo.escribirListaMedicos(listaMedicos);
                limpiar();
                JOptionPane.showMessageDialog(this, "Medico eliminado correctamente");
                encontrado = 1;
                break;
            }
        }
        if (encontrado == 0) {
            JOptionPane.showMessageDialog(this, "No se encontro el medico");
        }
        return horario;
    }

    public void pintarTabla() {
        DefaultTableModel modelo = new DefaultTableModel();
        String columnas[] = {"Identificacion", "Nombre", "Horario"};
        modelo.setColumnIdentifiers(columnas);
        for (Medico p : listaMedicos) {
            String[] fila = {p.getIdentificacion(), p.getNombre(), p.getHorario()};
            modelo.addRow(fila);
        }
        medicosTabla.setModel(modelo);
    }

    public int repetido() {
        int condicionRepetidoFuncion = 0;
        for (Medico p : listaMedicos) {
            if (p.getIdentificacion().equals(identificacionTexto.getText())) {
                condicionRepetidoFuncion = 1;
            } else {
                condicionRepetidoFuncion = 0;
            }
        }
        return condicionRepetidoFuncion;
    }

    public void eliminarHora(String hora) {
        if (horaCombo.getSelectedItem() == hora) {
            horasDisponibles.remove(hora);
            Collections.sort(horasDisponibles);
            horaCombo.removeItem(hora);
        }
        Archivo.escribirHorariosDisponibles(horasDisponibles);
        Collections.sort(horasDisponibles);
    }

    public void validacionesVacio() {
        if (nombreTexto.equals("") || edadTexto.equals("") || identificacionTexto.equals("") || horaCombo.getSelectedItem().equals("SELECCIONE")) {
            JOptionPane.showMessageDialog(null, "Rellene todos los campos marcados con *");
            condicion1 = 0;
        } else {
            condicion1 = 1;
        }
    }

    public ArrayList<String> colocarHoras(String hora) {
        if (hora.equals("8:00 - 10:00")) {
            horasTrabajo.add("8:00");
            horasTrabajo.add("8:20");
            horasTrabajo.add("8:40");
            horasTrabajo.add("9:00");
            horasTrabajo.add("9:20");
            horasTrabajo.add("9:40");
            horasTrabajo.add("10:00");
        }
        if (hora.equals("10:20 - 12:20")) {
            horasTrabajo.add("10:20");
            horasTrabajo.add("10:40");
            horasTrabajo.add("11:00");
            horasTrabajo.add("11:20");
            horasTrabajo.add("11:40");
            horasTrabajo.add("12:00");
            horasTrabajo.add("12:20");
        }
        if (hora.equals("12:40 - 2:40")) {
            horasTrabajo.add("12:40");
            horasTrabajo.add("1:00");
            horasTrabajo.add("1:20");
            horasTrabajo.add("1:40");
            horasTrabajo.add("2:00");
            horasTrabajo.add("2:20");
            horasTrabajo.add("2:40");
        }
        if (hora.equals("3:00 - 5:00")) {
            horasTrabajo.add("3:00");
            horasTrabajo.add("3:20");
            horasTrabajo.add("3:40");
            horasTrabajo.add("4:00");
            horasTrabajo.add("4:20");
            horasTrabajo.add("4:40");
            horasTrabajo.add("5:00");
        }
        if (hora.equals("5:20 - 7:00")) {
            horasTrabajo.add("5:20");
            horasTrabajo.add("5:40");
            horasTrabajo.add("6:00");
            horasTrabajo.add("6:20");
            horasTrabajo.add("6:40");
            horasTrabajo.add("7:00");
            horasTrabajo.add("7:20");
        }
        return horasTrabajo;
    }

    public ArrayList<Medico> getMedicos() {
        return listaMedicos;
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton añadirDoctorBoton;
    private javax.swing.JTextField edadTexto;
    private javax.swing.JButton editarBoton;
    private javax.swing.JButton eliminarBoton;
    private javax.swing.JButton encontrarMedicoBoton;
    private javax.swing.JComboBox<String> horaCombo;
    private javax.swing.JTextField identificacionTexto;
    private javax.swing.JTextField identificacionTexto1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea medicoEncontrado;
    private javax.swing.JTable medicosTabla;
    private javax.swing.JTextField nombreTexto;
    // End of variables declaration//GEN-END:variables
    ArrayList<String> horasTrabajo = new ArrayList<>();
    public int condicion1;
    public int condicion2;
    public int condicionRepetido;
}
